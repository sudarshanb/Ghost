{
  "version": 3,
  "file": "ghost-tests.js",
  "sources": [
    ".tmp/ember-tests-transpiled/test-helper.js",
    ".tmp/ember-tests-transpiled/unit/components/gh-trim-focus-input_test.js",
    ".tmp/ember-tests-transpiled/unit/components/gh-url-preview_test.js",
    ".tmp/ember-tests-transpiled/unit/controllers/post-settings-menu_test.js",
    ".tmp/ember-tests-transpiled/unit/controllers/settings-general_test.js",
    ".tmp/ember-tests-transpiled/unit/models/post_test.js",
    ".tmp/ember-tests-transpiled/unit/models/role_test.js",
    ".tmp/ember-tests-transpiled/unit/models/setting_test.js",
    ".tmp/ember-tests-transpiled/unit/models/tag_test.js",
    ".tmp/ember-tests-transpiled/unit/models/user_test.js",
    ".tmp/ember-tests-transpiled/unit/utils/ghost-paths_test.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzhtnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"ghost/tests/test-helper\", \n  [\"ember-cli/test-loader\",\"ember/resolver\",\"ember-mocha\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var TestLoader = __dependency1__[\"default\"];\n\n    var Resolver = __dependency2__[\"default\"];\n\n    var setResolver = __dependency3__.setResolver;\n\n    \r\n    var resolver = Resolver.create();\r\n    resolver.namespace = {\r\n      modulePrefix: 'ghost'\r\n    };\r\n    \r\n    setResolver(resolver);\r\n    \r\n    TestLoader.load();\r\n    \r\n    window.expect = chai.expect;\r\n    \r\n    mocha.checkLeaks();\r\n    mocha.globals(['jQuery', 'EmberInspector']);\r\n    mocha.run();\n  });",
    "define(\"ghost/tests/unit/components/gh-trim-focus-input_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    var describeComponent = __dependency1__.describeComponent;\n    var it = __dependency1__.it;\n\n    \r\n    describeComponent('gh-trim-focus-input', function () {\r\n        it('trims value on focusOut', function () {\r\n            var component = this.subject({\r\n                value: 'some random stuff   '\r\n            });\r\n    \r\n            this.render();\r\n    \r\n            component.$().focusout();\r\n            expect(component.$().val()).to.equal('some random stuff');\r\n        });\r\n    \r\n        it('does not have the autofocus attribute if not set to focus', function () {\r\n            var component = this.subject({\r\n                value: 'some text',\r\n                focus: false\r\n            });\r\n    \r\n            this.render();\r\n    \r\n            expect(component.$().attr('autofocus')).to.not.be.ok;\r\n        });\r\n    \r\n        it('has the autofocus attribute if set to focus', function () {\r\n            var component = this.subject({\r\n                value: 'some text',\r\n                focus: true\r\n            });\r\n    \r\n            this.render();\r\n    \r\n            expect(component.$().attr('autofocus')).to.be.ok;\r\n        });\r\n    });\n  });",
    "define(\"ghost/tests/unit/components/gh-url-preview_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    var describeComponent = __dependency1__.describeComponent;\n    var it = __dependency1__.it;\n\n    \r\n    describeComponent('gh-url-preview',\r\n        function () {\r\n            it('generates the correct preview URL with a prefix', function () {\r\n                var component = this.subject({\r\n                    prefix: 'tag',\r\n                    slug: 'test-slug',\r\n                    tagName: 'p',\r\n                    classNames: 'test-class',\r\n    \r\n                    config: {blogUrl: 'http://my-ghost-blog.com'}\r\n                });\r\n    \r\n                this.render();\r\n    \r\n                expect(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\r\n            });\r\n    \r\n            it('generates the correct preview URL without a prefix', function () {\r\n                var component = this.subject({\r\n                    slug: 'test-slug',\r\n                    tagName: 'p',\r\n                    classNames: 'test-class',\r\n    \r\n                    config: {blogUrl: 'http://my-ghost-blog.com'}\r\n                });\r\n    \r\n                this.render();\r\n    \r\n                expect(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\r\n            });\r\n        }\r\n    );\n  });",
    "define(\"ghost/tests/unit/controllers/post-settings-menu_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    var describeModule = __dependency1__.describeModule;\n    var it = __dependency1__.it;\n\n    \r\n    describeModule(\r\n        'controller:post-settings-menu',\r\n        {\r\n            needs: ['controller:application']\r\n        },\r\n    \r\n        function () {\r\n            it('slugValue is one-way bound to model.slug', function () {\r\n                var controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        slug: 'a-slug'\r\n                    })\r\n                });\r\n    \r\n                expect(controller.get('model.slug')).to.equal('a-slug');\r\n                expect(controller.get('slugValue')).to.equal('a-slug');\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('model.slug', 'changed-slug');\r\n    \r\n                    expect(controller.get('slugValue')).to.equal('changed-slug');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('slugValue', 'changed-directly');\r\n    \r\n                    expect(controller.get('model.slug')).to.equal('changed-slug');\r\n                    expect(controller.get('slugValue')).to.equal('changed-directly');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    // test that the one-way binding is still in place\r\n                    controller.set('model.slug', 'should-update');\r\n    \r\n                    expect(controller.get('slugValue')).to.equal('should-update');\r\n                });\r\n            });\r\n    \r\n            it('metaTitleScratch is one-way bound to model.meta_title', function () {\r\n                var controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        meta_title: 'a title'\r\n                    })\r\n                });\r\n    \r\n                expect(controller.get('model.meta_title')).to.equal('a title');\r\n                expect(controller.get('metaTitleScratch')).to.equal('a title');\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('model.meta_title', 'a different title');\r\n    \r\n                    expect(controller.get('metaTitleScratch')).to.equal('a different title');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('metaTitleScratch', 'changed directly');\r\n    \r\n                    expect(controller.get('model.meta_title')).to.equal('a different title');\r\n                    expect(controller.get('metaTitleScratch')).to.equal('changed directly');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    // test that the one-way binding is still in place\r\n                    controller.set('model.meta_title', 'should update');\r\n    \r\n                    expect(controller.get('metaTitleScratch')).to.equal('should update');\r\n                });\r\n            });\r\n    \r\n            it('metaDescriptionScratch is one-way bound to model.meta_description', function () {\r\n                var controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        meta_description: 'a description'\r\n                    })\r\n                });\r\n    \r\n                expect(controller.get('model.meta_description')).to.equal('a description');\r\n                expect(controller.get('metaDescriptionScratch')).to.equal('a description');\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('model.meta_description', 'a different description');\r\n    \r\n                    expect(controller.get('metaDescriptionScratch')).to.equal('a different description');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('metaDescriptionScratch', 'changed directly');\r\n    \r\n                    expect(controller.get('model.meta_description')).to.equal('a different description');\r\n                    expect(controller.get('metaDescriptionScratch')).to.equal('changed directly');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    // test that the one-way binding is still in place\r\n                    controller.set('model.meta_description', 'should update');\r\n    \r\n                    expect(controller.get('metaDescriptionScratch')).to.equal('should update');\r\n                });\r\n            });\r\n    \r\n            describe('seoTitle', function () {\r\n                it('should be the meta_title if one exists', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            meta_title: 'a meta-title',\r\n                            titleScratch: 'should not be used'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('seoTitle')).to.equal('a meta-title');\r\n                });\r\n    \r\n                it('should default to the title if an explicit meta-title does not exist', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            titleScratch: 'should be the meta-title'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('seoTitle')).to.equal('should be the meta-title');\r\n                });\r\n    \r\n                it('should be the meta_title if both title and meta_title exist', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            meta_title: 'a meta-title',\r\n                            titleScratch: 'a title'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('seoTitle')).to.equal('a meta-title');\r\n                });\r\n    \r\n                it('should revert to the title if explicit meta_title is removed', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            meta_title: 'a meta-title',\r\n                            titleScratch: 'a title'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('seoTitle')).to.equal('a meta-title');\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.meta_title', '');\r\n    \r\n                        expect(controller.get('seoTitle')).to.equal('a title');\r\n                    });\r\n                });\r\n    \r\n                it('should truncate to 70 characters with an appended ellipsis', function () {\r\n                    var longTitle,\r\n                        controller;\r\n    \r\n                    longTitle = new Array(100).join('a');\r\n                    expect(longTitle.length).to.equal(99);\r\n    \r\n                    controller = this.subject({\r\n                        model: Ember.Object.create()\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        var expected = longTitle.substr(0, 70) + '&hellip;';\r\n    \r\n                        controller.set('metaTitleScratch', longTitle);\r\n    \r\n                        expect(controller.get('seoTitle').toString().length).to.equal(78);\r\n                        expect(controller.get('seoTitle').toString()).to.equal(expected);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('seoDescription', function () {\r\n                it('should be the meta_description if one exists', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            meta_description: 'a description'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('seoDescription')).to.equal('a description');\r\n                });\r\n    \r\n                it.skip('should be generated from the rendered markdown if not explicitly set', function () {\r\n                    // can't test right now because the rendered markdown is being pulled\r\n                    // from the DOM via jquery\r\n                });\r\n    \r\n                it('should truncate to 156 characters with an appended ellipsis', function () {\r\n                    var longDescription,\r\n                        controller;\r\n    \r\n                    longDescription = new Array(200).join('a');\r\n                    expect(longDescription.length).to.equal(199);\r\n    \r\n                    controller = this.subject({\r\n                        model: Ember.Object.create()\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        var expected = longDescription.substr(0, 156) + '&hellip;';\r\n    \r\n                        controller.set('metaDescriptionScratch', longDescription);\r\n    \r\n                        expect(controller.get('seoDescription').toString().length).to.equal(164);\r\n                        expect(controller.get('seoDescription').toString()).to.equal(expected);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('seoURL', function () {\r\n                it('should be the URL of the blog if no post slug exists', function () {\r\n                    var controller = this.subject({\r\n                        config: Ember.Object.create({blogUrl: 'http://my-ghost-blog.com'}),\r\n                        model: Ember.Object.create()\r\n                    });\r\n    \r\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/');\r\n                });\r\n    \r\n                it('should be the URL of the blog plus the post slug', function () {\r\n                    var controller = this.subject({\r\n                        config: Ember.Object.create({blogUrl: 'http://my-ghost-blog.com'}),\r\n                        model: Ember.Object.create({slug: 'post-slug'})\r\n                    });\r\n    \r\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\r\n                });\r\n    \r\n                it('should update when the post slug changes', function () {\r\n                    var controller = this.subject({\r\n                        config: Ember.Object.create({blogUrl: 'http://my-ghost-blog.com'}),\r\n                        model: Ember.Object.create({slug: 'post-slug'})\r\n                    });\r\n    \r\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.slug', 'changed-slug');\r\n    \r\n                        expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\r\n                    });\r\n                });\r\n    \r\n                it('should truncate a long URL to 70 characters with an appended ellipsis', function () {\r\n                    var longSlug,\r\n                        blogURL = 'http://my-ghost-blog.com',\r\n                        expected,\r\n                        controller;\r\n    \r\n                    longSlug = new Array(75).join('a');\r\n                    expect(longSlug.length).to.equal(74);\r\n    \r\n                    controller = this.subject({\r\n                        config: Ember.Object.create({blogUrl: blogURL}),\r\n                        model: Ember.Object.create({slug: longSlug})\r\n                    });\r\n    \r\n                    expected = blogURL + '/' + longSlug + '/';\r\n                    expected = expected.substr(0, 70) + '&hellip;';\r\n    \r\n                    expect(controller.get('seoURL').toString().length).to.equal(78);\r\n                    expect(controller.get('seoURL').toString()).to.equal(expected);\r\n                });\r\n            });\r\n    \r\n            describe('togglePage', function () {\r\n                it('should toggle the page property', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            page: false,\r\n                            isNew: true\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('model.page')).to.not.be.ok;\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('togglePage');\r\n    \r\n                        expect(controller.get('model.page')).to.be.ok;\r\n                    });\r\n                });\r\n    \r\n                it('should not save the post if it is still new', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            page: false,\r\n                            isNew: true,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                                return Ember.RSVP.resolve();\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('togglePage');\r\n    \r\n                        expect(controller.get('model.page')).to.be.ok;\r\n                        expect(controller.get('model.saved')).to.not.be.ok;\r\n                    });\r\n                });\r\n    \r\n                it('should save the post if it is not new', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            page: false,\r\n                            isNew: false,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                                return Ember.RSVP.resolve();\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('togglePage');\r\n    \r\n                        expect(controller.get('model.page')).to.be.ok;\r\n                        expect(controller.get('model.saved')).to.equal(1);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('toggleFeatured', function () {\r\n                it('should toggle the featured property', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            featured: false,\r\n                            isNew: true\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('toggleFeatured');\r\n    \r\n                        expect(controller.get('model.featured')).to.be.ok;\r\n                    });\r\n                });\r\n    \r\n                it('should not save the post if it is still new', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            featured: false,\r\n                            isNew: true,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                                return Ember.RSVP.resolve();\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('toggleFeatured');\r\n    \r\n                        expect(controller.get('model.featured')).to.be.ok;\r\n                        expect(controller.get('model.saved')).to.not.be.ok;\r\n                    });\r\n                });\r\n    \r\n                it('should save the post if it is not new', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            featured: false,\r\n                            isNew: false,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                                return Ember.RSVP.resolve();\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.send('toggleFeatured');\r\n    \r\n                        expect(controller.get('model.featured')).to.be.ok;\r\n                        expect(controller.get('model.saved')).to.equal(1);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('generateAndSetSlug', function () {\r\n                it('should generate a slug and set it on the destination', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                return Ember.RSVP.resolve(str + '-slug');\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({slug: ''})\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.titleScratch', 'title');\r\n                        controller.generateAndSetSlug('model.slug');\r\n    \r\n                        expect(controller.get('model.slug')).to.equal('');\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('title-slug');\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n    \r\n                it('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                return Ember.RSVP.resolve(str + '-slug');\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever'\r\n                        })\r\n                    });\r\n    \r\n                    expect(controller.get('model.slug')).to.equal('whatever');\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.titleScratch', 'title');\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('whatever');\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('titleObserver', function () {\r\n                it('should invoke generateAndSetSlug if the post is new and a title has not been set', function (done) {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({isNew: true}),\r\n                        invoked: 0,\r\n                        generateAndSetSlug: function () {\r\n                            this.incrementProperty('invoked');\r\n                        }\r\n                    });\r\n    \r\n                    expect(controller.get('invoked')).to.equal(0);\r\n                    expect(controller.get('model.title')).to.not.be.ok;\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.titleScratch', 'test');\r\n    \r\n                        controller.titleObserver();\r\n    \r\n                        // since titleObserver invokes generateAndSetSlug with a delay of 700ms\r\n                        // we need to make sure this assertion runs after that.\r\n                        // probably a better way to handle this?\r\n                        Ember.run.later(function () {\r\n                            expect(controller.get('invoked')).to.equal(1);\r\n    \r\n                            done();\r\n                        }, 800);\r\n                    });\r\n                });\r\n    \r\n                it('should invoke generateAndSetSlug if the post title is \"(Untitled)\"', function (done) {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            isNew: false,\r\n                            title: '(Untitled)'\r\n                        }),\r\n                        invoked: 0,\r\n                        generateAndSetSlug: function () {\r\n                            this.incrementProperty('invoked');\r\n                        }\r\n                    });\r\n    \r\n                    expect(controller.get('invoked')).to.equal(0);\r\n                    expect(controller.get('model.title')).to.equal('(Untitled)');\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.titleScratch', 'test');\r\n    \r\n                        controller.titleObserver();\r\n    \r\n                        // since titleObserver invokes generateAndSetSlug with a delay of 700ms\r\n                        // we need to make sure this assertion runs after that.\r\n                        // probably a better way to handle this?\r\n                        Ember.run.later(function () {\r\n                            expect(controller.get('invoked')).to.equal(1);\r\n    \r\n                            done();\r\n                        }, 800);\r\n                    });\r\n                });\r\n    \r\n                it('should not invoke generateAndSetSlug if the post is new but has a title', function (done) {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            isNew: true,\r\n                            title: 'a title'\r\n                        }),\r\n                        invoked: 0,\r\n                        generateAndSetSlug: function () {\r\n                            this.incrementProperty('invoked');\r\n                        }\r\n                    });\r\n    \r\n                    expect(controller.get('invoked')).to.equal(0);\r\n                    expect(controller.get('model.title')).to.equal('a title');\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('model.titleScratch', 'test');\r\n    \r\n                        controller.titleObserver();\r\n    \r\n                        // since titleObserver invokes generateAndSetSlug with a delay of 700ms\r\n                        // we need to make sure this assertion runs after that.\r\n                        // probably a better way to handle this?\r\n                        Ember.run.later(function () {\r\n                            expect(controller.get('invoked')).to.equal(0);\r\n    \r\n                            done();\r\n                        }, 800);\r\n                    });\r\n                });\r\n            });\r\n    \r\n            describe('updateSlug', function () {\r\n                it('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\r\n                    var controller = this.subject({\r\n                        model: Ember.Object.create({\r\n                            slug: 'slug'\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        // unchanged\r\n                        controller.set('slugValue', 'slug');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        expect(controller.get('model.slug')).to.equal('slug');\r\n                        expect(controller.get('slugValue')).to.equal('slug');\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        // unchanged after trim\r\n                        controller.set('slugValue', 'slug  ');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        expect(controller.get('model.slug')).to.equal('slug');\r\n                        expect(controller.get('slugValue')).to.equal('slug');\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        // blank\r\n                        controller.set('slugValue', '');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        expect(controller.get('model.slug')).to.equal('slug');\r\n                        expect(controller.get('slugValue')).to.equal('slug');\r\n                    });\r\n                });\r\n    \r\n                it('should not set a new slug if the server-generated slug matches existing slug', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                var promise;\r\n                                promise = Ember.RSVP.resolve(str.split('#')[0]);\r\n                                this.set('lastPromise', promise);\r\n                                return promise;\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever'\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('slugValue', 'whatever#slug');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('whatever');\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n    \r\n                it('should not set a new slug if the only change is to the appended increment value', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                var promise;\r\n                                promise = Ember.RSVP.resolve(str.replace(/[^a-zA-Z]/g, '') + '-2');\r\n                                this.set('lastPromise', promise);\r\n                                return promise;\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever'\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('slugValue', 'whatever!');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('whatever');\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n    \r\n                it('should set the slug if the new slug is different', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                var promise;\r\n                                promise = Ember.RSVP.resolve(str);\r\n                                this.set('lastPromise', promise);\r\n                                return promise;\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever',\r\n                            save: Ember.K\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('slugValue', 'changed');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('changed');\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n    \r\n                it('should save the post when the slug changes and the post is not new', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                var promise;\r\n                                promise = Ember.RSVP.resolve(str);\r\n                                this.set('lastPromise', promise);\r\n                                return promise;\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever',\r\n                            saved: 0,\r\n                            isNew: false,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('slugValue', 'changed');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('changed');\r\n                            expect(controller.get('model.saved')).to.equal(1);\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n    \r\n                it('should not save the post when the slug changes and the post is new', function (done) {\r\n                    var controller = this.subject({\r\n                        slugGenerator: Ember.Object.create({\r\n                            generateSlug: function (str) {\r\n                                var promise;\r\n                                promise = Ember.RSVP.resolve(str);\r\n                                this.set('lastPromise', promise);\r\n                                return promise;\r\n                            }\r\n                        }),\r\n                        model: Ember.Object.create({\r\n                            slug: 'whatever',\r\n                            saved: 0,\r\n                            isNew: true,\r\n                            save: function () {\r\n                                this.incrementProperty('saved');\r\n                            }\r\n                        })\r\n                    });\r\n    \r\n                    Ember.run(function () {\r\n                        controller.set('slugValue', 'changed');\r\n                        controller.send('updateSlug', controller.get('slugValue'));\r\n    \r\n                        Ember.RSVP.resolve(controller.get('lastPromise')).then(function () {\r\n                            expect(controller.get('model.slug')).to.equal('changed');\r\n                            expect(controller.get('model.saved')).to.equal(0);\r\n    \r\n                            done();\r\n                        }).catch(done);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    );\n  });",
    "define(\"ghost/tests/unit/controllers/settings-general_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    var describeModule = __dependency1__.describeModule;\n    var it = __dependency1__.it;\n\n    \r\n    describeModule(\r\n        'controller:settings/general',\r\n    \r\n        function () {\r\n            it('isDatedPermalinks should be correct', function () {\r\n                var controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        permalinks: '/:year/:month/:day/:slug/'\r\n                    })\r\n                });\r\n    \r\n                expect(controller.get('isDatedPermalinks')).to.be.ok;\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('model.permalinks', '/:slug/');\r\n    \r\n                    expect(controller.get('isDatedPermalinks')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('setting isDatedPermalinks should switch between dated and slug', function () {\r\n                var controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        permalinks: '/:year/:month/:day/:slug/'\r\n                    })\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('isDatedPermalinks', false);\r\n    \r\n                    expect(controller.get('isDatedPermalinks')).to.not.be.ok;\r\n                    expect(controller.get('model.permalinks')).to.equal('/:slug/');\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    controller.set('isDatedPermalinks', true);\r\n    \r\n                    expect(controller.get('isDatedPermalinks')).to.be.ok;\r\n                    expect(controller.get('model.permalinks')).to.equal('/:year/:month/:day/:slug/');\r\n                });\r\n            });\r\n    \r\n            it('themes should be correct', function () {\r\n                var controller,\r\n                    themes = [];\r\n    \r\n                themes.push({\r\n                    name: 'casper',\r\n                    active: true,\r\n                    package: {\r\n                        name: 'Casper',\r\n                        version: '1.1.5'\r\n                    }\r\n                });\r\n    \r\n                themes.push({\r\n                    name: 'rasper',\r\n                    package: {\r\n                        name: 'Rasper',\r\n                        version: '1.0.0'\r\n                    }\r\n                });\r\n    \r\n                controller = this.subject({\r\n                    model: Ember.Object.create({\r\n                        availableThemes: themes\r\n                    })\r\n                });\r\n    \r\n                themes = controller.get('themes');\r\n                expect(themes).to.be.an.Array;\r\n                expect(themes.length).to.equal(2);\r\n                expect(themes.objectAt(0).name).to.equal('casper');\r\n                expect(themes.objectAt(0).active).to.be.ok;\r\n                expect(themes.objectAt(0).label).to.equal('Casper - 1.1.5');\r\n                expect(themes.objectAt(1).name).to.equal('rasper');\r\n                expect(themes.objectAt(1).active).to.not.be.ok;\r\n                expect(themes.objectAt(1).label).to.equal('Rasper - 1.0.0');\r\n            });\r\n        }\r\n    );\n  });",
    "define(\"ghost/tests/unit/models/post_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    \r\n    describeModel('post',\r\n        {\r\n            needs:['model:user', 'model:tag', 'model:role']\r\n        },\r\n    \r\n        function () {\r\n            it('has a validation type of \"post\"', function () {\r\n                var model = this.subject();\r\n    \r\n                expect(model.validationType).to.equal('post');\r\n            });\r\n    \r\n            it('isPublished and isDraft are correct', function () {\r\n                var model = this.subject({\r\n                    status: 'published'\r\n                });\r\n    \r\n                expect(model.get('isPublished')).to.be.ok;\r\n                expect(model.get('isDraft')).to.not.be.ok;\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'draft');\r\n    \r\n                    expect(model.get('isPublished')).to.not.be.ok;\r\n                    expect(model.get('isDraft')).to.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('isAuthoredByUser is correct', function () {\r\n                var model = this.subject({\r\n                    author_id: 15\r\n                }),\r\n                user = Ember.Object.create({id: '15'});\r\n    \r\n                expect(model.isAuthoredByUser(user)).to.be.ok;\r\n    \r\n                Ember.run(function () {\r\n                    model.set('author_id', 1);\r\n    \r\n                    expect(model.isAuthoredByUser(user)).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('updateTags removes and deletes old tags', function () {\r\n                var model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    var modelTags = model.get('tags'),\r\n                        tag1 = this.store().createRecord('tag', {id: '1'}),\r\n                        tag2 = this.store().createRecord('tag', {id: '2'}),\r\n                        tag3 = this.store().createRecord('tag');\r\n    \r\n                    // During testing a record created without an explicit id will get\r\n                    // an id of 'fixture-n' instead of null\r\n                    tag3.set('id', null);\r\n    \r\n                    modelTags.pushObject(tag1);\r\n                    modelTags.pushObject(tag2);\r\n                    modelTags.pushObject(tag3);\r\n    \r\n                    expect(model.get('tags.length')).to.equal(3);\r\n    \r\n                    model.updateTags();\r\n    \r\n                    expect(model.get('tags.length')).to.equal(2);\r\n                    expect(model.get('tags.firstObject.id')).to.equal('1');\r\n                    expect(model.get('tags').objectAt(1).get('id')).to.equal('2');\r\n                    expect(tag1.get('isDeleted')).to.not.be.ok;\r\n                    expect(tag2.get('isDeleted')).to.not.be.ok;\r\n                    expect(tag3.get('isDeleted')).to.be.ok;\r\n                });\r\n            });\r\n        }\r\n    );\n  });",
    "define(\"ghost/tests/unit/models/role_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    \r\n    describeModel('role', function () {\r\n        it('provides a lowercase version of the name', function () {\r\n            var model = this.subject({\r\n                name: 'Author'\r\n            });\r\n    \r\n            expect(model.get('name')).to.equal('Author');\r\n            expect(model.get('lowerCaseName')).to.equal('author');\r\n    \r\n            Ember.run(function () {\r\n                model.set('name', 'Editor');\r\n    \r\n                expect(model.get('name')).to.equal('Editor');\r\n                expect(model.get('lowerCaseName')).to.equal('editor');\r\n            });\r\n        });\r\n    });\n  });",
    "define(\"ghost/tests/unit/models/setting_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    \r\n    describeModel('setting', function () {\r\n        it('has a validation type of \"setting\"', function () {\r\n            var model = this.subject();\r\n    \r\n            expect(model.get('validationType')).to.equal('setting');\r\n        });\r\n    });\n  });",
    "define(\"ghost/tests/unit/models/tag_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    \r\n    describeModel('tag', function () {\r\n        it('has a validation type of \"tag\"', function () {\r\n            var model = this.subject();\r\n    \r\n            expect(model.get('validationType')).to.equal('tag');\r\n        });\r\n    });\n  });",
    "define(\"ghost/tests/unit/models/user_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /*jshint expr:true */\r\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    \r\n    describeModel('user',\r\n        {\r\n            needs: ['model:role']\r\n        },\r\n    \r\n        function () {\r\n            it('has a validation type of \"user\"', function () {\r\n                var model = this.subject();\r\n    \r\n                expect(model.get('validationType')).to.equal('user');\r\n            });\r\n    \r\n            it('active property is correct', function () {\r\n                var model = this.subject({\r\n                    status: 'active'\r\n                });\r\n    \r\n                expect(model.get('active')).to.be.ok;\r\n    \r\n                ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\r\n                    Ember.run(function () {\r\n                        model.set('status', status);\r\n    \r\n                        expect(model.get('status')).to.be.ok;\r\n                    });\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'inactive');\r\n    \r\n                    expect(model.get('active')).to.not.be.ok;\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'invited');\r\n    \r\n                    expect(model.get('active')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('invited property is correct', function () {\r\n                var model = this.subject({\r\n                    status: 'invited'\r\n                });\r\n    \r\n                expect(model.get('invited')).to.be.ok;\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'invited-pending');\r\n    \r\n                    expect(model.get('invited')).to.be.ok;\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'active');\r\n    \r\n                    expect(model.get('invited')).to.not.be.ok;\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'inactive');\r\n    \r\n                    expect(model.get('invited')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('pending property is correct', function () {\r\n                var model = this.subject({\r\n                    status: 'invited-pending'\r\n                });\r\n    \r\n                expect(model.get('pending')).to.be.ok;\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'invited');\r\n    \r\n                    expect(model.get('pending')).to.not.be.ok;\r\n                });\r\n    \r\n                Ember.run(function () {\r\n                    model.set('status', 'inactive');\r\n    \r\n                    expect(model.get('pending')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('role property is correct', function () {\r\n                var model,\r\n                    role;\r\n    \r\n                model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    role = this.store().createRecord('role', {name: 'Author'});\r\n    \r\n                    model.get('roles').pushObject(role);\r\n    \r\n                    expect(model.get('role.name')).to.equal('Author');\r\n                });\r\n    \r\n                Ember.run(this, function () {\r\n                    role = this.store().createRecord('role', {name: 'Editor'});\r\n    \r\n                    model.set('role', role);\r\n    \r\n                    expect(model.get('role.name')).to.equal('Editor');\r\n                });\r\n            });\r\n    \r\n            it('isAuthor property is correct', function () {\r\n                var model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    var role = this.store().createRecord('role', {name: 'Author'});\r\n    \r\n                    model.set('role', role);\r\n    \r\n                    expect(model.get('isAuthor')).to.be.ok;\r\n                    expect(model.get('isEditor')).to.not.be.ok;\r\n                    expect(model.get('isAdmin')).to.not.be.ok;\r\n                    expect(model.get('isOwner')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('isEditor property is correct', function () {\r\n                var model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    var role = this.store().createRecord('role', {name: 'Editor'});\r\n    \r\n                    model.set('role', role);\r\n    \r\n                    expect(model.get('isEditor')).to.be.ok;\r\n                    expect(model.get('isAuthor')).to.not.be.ok;\r\n                    expect(model.get('isAdmin')).to.not.be.ok;\r\n                    expect(model.get('isOwner')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('isAdmin property is correct', function () {\r\n                var model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    var role = this.store().createRecord('role', {name: 'Administrator'});\r\n    \r\n                    model.set('role', role);\r\n    \r\n                    expect(model.get('isAdmin')).to.be.ok;\r\n                    expect(model.get('isAuthor')).to.not.be.ok;\r\n                    expect(model.get('isEditor')).to.not.be.ok;\r\n                    expect(model.get('isOwner')).to.not.be.ok;\r\n                });\r\n            });\r\n    \r\n            it('isOwner property is correct', function () {\r\n                var model = this.subject();\r\n    \r\n                Ember.run(this, function () {\r\n                    var role = this.store().createRecord('role', {name: 'Owner'});\r\n    \r\n                    model.set('role', role);\r\n    \r\n                    expect(model.get('isOwner')).to.be.ok;\r\n                    expect(model.get('isAuthor')).to.not.be.ok;\r\n                    expect(model.get('isAdmin')).to.not.be.ok;\r\n                    expect(model.get('isEditor')).to.not.be.ok;\r\n                });\r\n            });\r\n        }\r\n    );\n  });",
    "define(\"ghost/tests/unit/utils/ghost-paths_test\", \n  [\"ghost/utils/ghost-paths\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\r\n    \r\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    describe('ghost-paths', function () {\r\n        describe('join', function () {\r\n            var join = ghostPaths().url.join;\r\n    \r\n            it('should join two or more paths, normalizing slashes', function () {\r\n                var path;\r\n    \r\n                path = join('/one/', '/two/');\r\n                expect(path).to.equal('/one/two/');\r\n    \r\n                path = join('/one', '/two/');\r\n                expect(path).to.equal('/one/two/');\r\n    \r\n                path = join('/one/', 'two/');\r\n                expect(path).to.equal('/one/two/');\r\n    \r\n                path = join('/one/', 'two/', '/three/');\r\n                expect(path).to.equal('/one/two/three/');\r\n    \r\n                path = join('/one/', 'two', 'three/');\r\n                expect(path).to.equal('/one/two/three/');\r\n            });\r\n    \r\n            it('should not change the slash at the beginning', function () {\r\n                var path;\r\n    \r\n                path = join('one/');\r\n                expect(path).to.equal('one/');\r\n                path = join('one/', 'two');\r\n                expect(path).to.equal('one/two/');\r\n                path = join('/one/', 'two');\r\n                expect(path).to.equal('/one/two/');\r\n                path = join('one/', 'two', 'three');\r\n                expect(path).to.equal('one/two/three/');\r\n                path = join('/one/', 'two', 'three');\r\n                expect(path).to.equal('/one/two/three/');\r\n            });\r\n    \r\n            it('should always return a slash at the end', function () {\r\n                var path;\r\n    \r\n                path = join();\r\n                expect(path).to.equal('/');\r\n                path = join('');\r\n                expect(path).to.equal('/');\r\n                path = join('one');\r\n                expect(path).to.equal('one/');\r\n                path = join('one/');\r\n                expect(path).to.equal('one/');\r\n                path = join('one', 'two');\r\n                expect(path).to.equal('one/two/');\r\n                path = join('one', 'two/');\r\n                expect(path).to.equal('one/two/');\r\n            });\r\n        });\r\n    });\n  });"
  ]
}